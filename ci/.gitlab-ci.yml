

stages:
  - security
  - test
  - lint
  - build
  - release

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  STAGING_TAG: "staging"
  PROD_TAG: "prod"

security-scan:
  image: golang:1.22.4-alpine
  stage: security
  before_script:
    - go install github.com/securego/gosec/v2/cmd/gosec@latest
    - go install golang.org/x/vuln/cmd/govulncheck@latest
  script:
    - gosec ./...
    - govulncheck ./...

test:
  image: golang:1.22.4-alpine
  stage: test
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - CGO_ENABLED=0 go test ./... -coverprofile=coverage-report.out
    - go tool cover -html=coverage-report.out -o coverage-report.html
    - go tool cover -func=coverage-report.out
  artifacts:
    paths:
      - coverage-report.html
    expire_in: 1 hour
  coverage: "/\\(statements\\)\\s+\\d+.?\\d+%/"

lint:
  image: golangci/golangci-lint:latest
  stage: lint
  allow_failure: false
  script:
    - golangci-lint run -v

build-image:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$PROD_TAG -f .dockerbuild/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE:$PROD_TAG

deploy:
  only:
  image: alpine:latest
  stage: release
  script:
    - chmod og= $SSH_PRIVATE_KEY
    - apk update && apk add openssh-client
    - ssh -i $SSH_PRIVATE_KEY -o StrictHostKeyChecking=no deployer@$IP_ADDRESS "docker compose pull && docker compose up -d"
